public final class qbittorrent/models/AddTorrentBody {
	public synthetic fun <init> (Ljava/util/List;Ljava/util/List;Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Float;Lkotlin/time/Duration;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (Ljava/util/List;Ljava/util/List;Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Float;Lkotlin/time/Duration;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Boolean;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getAutoTMM ()Ljava/lang/Boolean;
	public final fun getCategory ()Ljava/lang/String;
	public final fun getCookie ()Ljava/lang/String;
	public final fun getDlLimit ()Ljava/lang/Long;
	public final fun getFirstLastPiecePriority ()Ljava/lang/Boolean;
	public final fun getPaused ()Ljava/lang/Boolean;
	public final fun getRatioLimit ()Ljava/lang/Float;
	public final fun getRawTorrents ()Ljava/util/Map;
	public final fun getRename ()Ljava/lang/String;
	public final fun getRootFolder ()Ljava/lang/Boolean;
	public final fun getSavepath ()Ljava/lang/String;
	public final fun getSeedingTimeLimit-FghU774 ()Lkotlin/time/Duration;
	public final fun getSequentialDownload ()Ljava/lang/Boolean;
	public final fun getSkipChecking ()Ljava/lang/Boolean;
	public final fun getTags ()Ljava/util/List;
	public final fun getTorrents ()Ljava/util/List;
	public final fun getUpLimit ()Ljava/lang/Long;
	public final fun getUrls ()Ljava/util/List;
	public final fun setAutoTMM (Ljava/lang/Boolean;)V
	public final fun setCategory (Ljava/lang/String;)V
	public final fun setCookie (Ljava/lang/String;)V
	public final fun setDlLimit (Ljava/lang/Long;)V
	public final fun setFirstLastPiecePriority (Ljava/lang/Boolean;)V
	public final fun setPaused (Ljava/lang/Boolean;)V
	public final fun setRatioLimit (Ljava/lang/Float;)V
	public final fun setRename (Ljava/lang/String;)V
	public final fun setRootFolder (Ljava/lang/Boolean;)V
	public final fun setSavepath (Ljava/lang/String;)V
	public final fun setSeedingTimeLimit-BwNAW2A (Lkotlin/time/Duration;)V
	public final fun setSequentialDownload (Ljava/lang/Boolean;)V
	public final fun setSkipChecking (Ljava/lang/Boolean;)V
	public final fun setUpLimit (Ljava/lang/Long;)V
}

public final class qbittorrent/models/BuildInfo {
	public static final field Companion Lqbittorrent/models/BuildInfo$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBitness ()I
	public final fun getBoost ()Ljava/lang/String;
	public final fun getLibtorrent ()Ljava/lang/String;
	public final fun getOpenssl ()Ljava/lang/String;
	public final fun getQt ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/BuildInfo$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/BuildInfo$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/BuildInfo;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/BuildInfo;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/BuildInfo$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/Category {
	public static final field Companion Lqbittorrent/models/Category$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getSavePath ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/Category$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/Category$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/Category;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/Category;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/Category$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/ConnectionStatus : java/lang/Enum {
	public static final field CONNECTED Lqbittorrent/models/ConnectionStatus;
	public static final field Companion Lqbittorrent/models/ConnectionStatus$Companion;
	public static final field DISCONNECTED Lqbittorrent/models/ConnectionStatus;
	public static final field FIREWALLED Lqbittorrent/models/ConnectionStatus;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/ConnectionStatus;
	public static fun values ()[Lqbittorrent/models/ConnectionStatus;
}

public final class qbittorrent/models/ConnectionStatus$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/GlobalTransferInfo {
	public static final field Companion Lqbittorrent/models/GlobalTransferInfo$Companion;
	public fun <init> (JJJJJJILqbittorrent/models/ConnectionStatus;ZZJ)V
	public synthetic fun <init> (JJJJJJILqbittorrent/models/ConnectionStatus;ZZJILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getConnectionStatus ()Lqbittorrent/models/ConnectionStatus;
	public final fun getDhtNodes ()I
	public final fun getDlInfoData ()J
	public final fun getDlInfoSpeed ()J
	public final fun getDlRateLimit ()J
	public final fun getQueueing ()Z
	public final fun getRefreshInterval ()J
	public final fun getUpInfoData ()J
	public final fun getUpInfoSpeed ()J
	public final fun getUpRateLimit ()J
	public final fun getUseAltSpeedLimits ()Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/GlobalTransferInfo$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/GlobalTransferInfo$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/GlobalTransferInfo;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/GlobalTransferInfo;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/GlobalTransferInfo$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/LogEntry {
	public static final field Companion Lqbittorrent/models/LogEntry$Companion;
	public static final field TYPE_CRITICAL I
	public static final field TYPE_INFO I
	public static final field TYPE_NORMAL I
	public static final field TYPE_WARNING I
	public fun <init> (ILjava/lang/String;JI)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getId ()I
	public final fun getMessage ()Ljava/lang/String;
	public final fun getTimestamp ()J
	public final fun getType ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/LogEntry$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/LogEntry$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/LogEntry;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/LogEntry;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/LogEntry$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/MainData {
	public static final field Companion Lqbittorrent/models/MainData$Companion;
	public fun <init> (JZLjava/util/Map;Ljava/util/List;Ljava/util/Map;Ljava/util/List;Ljava/util/List;Ljava/util/List;Lqbittorrent/models/ServerState;)V
	public synthetic fun <init> (JZLjava/util/Map;Ljava/util/List;Ljava/util/Map;Ljava/util/List;Ljava/util/List;Ljava/util/List;Lqbittorrent/models/ServerState;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCategories ()Ljava/util/Map;
	public final fun getCategoriesRemoved ()Ljava/util/List;
	public final fun getFullUpdate ()Z
	public final fun getRid ()J
	public final fun getServerState ()Lqbittorrent/models/ServerState;
	public final fun getTags ()Ljava/util/List;
	public final fun getTagsRemoved ()Ljava/util/List;
	public final fun getTorrents ()Ljava/util/Map;
	public final fun getTorrentsRemoved ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/MainData$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/MainData$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/MainData;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/MainData;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/MainData$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/PeerLog {
	public static final field Companion Lqbittorrent/models/PeerLog$Companion;
	public fun <init> (ILjava/lang/String;JZLjava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBlocked ()Z
	public final fun getId ()I
	public final fun getIp ()Ljava/lang/String;
	public final fun getReason ()Ljava/lang/String;
	public final fun getTimestamp ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/PeerLog$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/PeerLog$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/PeerLog;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/PeerLog;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/PeerLog$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/PieceState : java/lang/Enum {
	public static final field DONE Lqbittorrent/models/PieceState;
	public static final field DOWNLOADING Lqbittorrent/models/PieceState;
	public static final field MISSING Lqbittorrent/models/PieceState;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/PieceState;
	public static fun values ()[Lqbittorrent/models/PieceState;
}

public final class qbittorrent/models/QBittorrentPrefs {
	public static final field Companion Lqbittorrent/models/QBittorrentPrefs$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;IZZZZZZLjava/lang/String;ZLjava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;Ljava/lang/String;ZLjava/lang/String;ZIIIZIIIZFLqbittorrent/models/preferences/MaxRatioAction;IZZIIIIIIIZLqbittorrent/models/preferences/BittorrentProtocol;ZZZIIZIIIILqbittorrent/models/preferences/SchedulerDays;ZZZLqbittorrent/models/preferences/TorrentEncryption;ZLqbittorrent/models/preferences/ProxyType;Ljava/lang/String;IZZLjava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;ZLjava/lang/String;ZLjava/util/List;Ljava/lang/String;IZLjava/lang/String;Ljava/lang/String;ZZZIIIZZZLjava/util/List;ZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;ZLqbittorrent/models/preferences/DyndnsService;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZZZLjava/lang/String;ZLjava/util/List;ZLjava/util/List;ZILjava/lang/String;ZZILjava/util/List;ILjava/lang/String;Ljava/lang/String;IIIZZZLjava/lang/Boolean;ZIIIZZIIIIILqbittorrent/models/preferences/UploadChokingAlgorithm;Lqbittorrent/models/preferences/UploadSlotsBehavior;ILqbittorrent/models/preferences/UtpTcpMixedMode;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;IZZZZZZLjava/lang/String;ZLjava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;Ljava/lang/String;ZLjava/lang/String;ZIIIZIIIZFLqbittorrent/models/preferences/MaxRatioAction;IZZIIIIIIIZLqbittorrent/models/preferences/BittorrentProtocol;ZZZIIZIIIILqbittorrent/models/preferences/SchedulerDays;ZZZLqbittorrent/models/preferences/TorrentEncryption;ZLqbittorrent/models/preferences/ProxyType;Ljava/lang/String;IZZLjava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;ZLjava/lang/String;ZLjava/util/List;Ljava/lang/String;IZLjava/lang/String;Ljava/lang/String;ZZZIIIZZZLjava/util/List;ZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;ZLqbittorrent/models/preferences/DyndnsService;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZZZLjava/lang/String;ZLjava/util/List;ZLjava/util/List;ZILjava/lang/String;ZZILjava/util/List;ILjava/lang/String;Ljava/lang/String;IIIZZZLjava/lang/Boolean;ZIIIZZIIIIILqbittorrent/models/preferences/UploadChokingAlgorithm;Lqbittorrent/models/preferences/UploadSlotsBehavior;ILqbittorrent/models/preferences/UtpTcpMixedMode;IIIIILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAddTrackers ()Ljava/util/List;
	public final fun getAddTrackersEnabled ()Z
	public final fun getAltDlLimit ()I
	public final fun getAltUpLimit ()I
	public final fun getAlternativeWebUiEnabled ()Z
	public final fun getAlternativeWebUiPath ()Ljava/lang/String;
	public final fun getAnnounceIp ()Ljava/lang/String;
	public final fun getAnnounceToAllTiers ()Z
	public final fun getAnnounceToAllTrackers ()Z
	public final fun getAnonymousMode ()Z
	public final fun getAsyncIoThreads ()I
	public final fun getAutoDeleteMode ()I
	public final fun getAutoTmmEnabled ()Z
	public final fun getAutorunEnabled ()Z
	public final fun getAutorunProgram ()Ljava/lang/String;
	public final fun getBannedIps ()Ljava/util/List;
	public final fun getBittorrentProtocol ()Lqbittorrent/models/preferences/BittorrentProtocol;
	public final fun getBypassAuthSubnetWhitelist ()Ljava/util/List;
	public final fun getBypassAuthSubnetWhitelistEnabled ()Z
	public final fun getBypassLocalAuth ()Z
	public final fun getCategoryChangedTmmEnabled ()Z
	public final fun getCheckingMemoryUse ()I
	public final fun getCreateSubfolderEnabled ()Ljava/lang/Boolean;
	public final fun getCurrentInterfaceAddress ()Ljava/lang/String;
	public final fun getCurrentNetworkInterface ()Ljava/lang/String;
	public final fun getDht ()Z
	public final fun getDiskCache ()I
	public final fun getDiskCacheTtl ()I
	public final fun getDlLimit ()I
	public final fun getDontCountSlowTorrents ()Z
	public final fun getDyndnsDomain ()Ljava/lang/String;
	public final fun getDyndnsEnabled ()Z
	public final fun getDyndnsPassword ()Ljava/lang/String;
	public final fun getDyndnsService ()Lqbittorrent/models/preferences/DyndnsService;
	public final fun getDyndnsUsername ()Ljava/lang/String;
	public final fun getEmbeddedTrackerPort ()I
	public final fun getEnableCoalesceReadWrite ()Z
	public final fun getEnableEmbeddedTracker ()Z
	public final fun getEnableMultiConnectionsFromSameIp ()Z
	public final fun getEnableOsCache ()Ljava/lang/Boolean;
	public final fun getEnablePieceExtentAffinity ()Z
	public final fun getEnableUploadSuggestions ()Z
	public final fun getEncryption ()Lqbittorrent/models/preferences/TorrentEncryption;
	public final fun getExportDir ()Ljava/lang/String;
	public final fun getExportDirFinished ()Ljava/lang/String;
	public final fun getFilePoolSize ()I
	public final fun getIncompleteFilesExt ()Z
	public final fun getIpFilterEnabled ()Z
	public final fun getIpFilterPath ()Ljava/lang/String;
	public final fun getIpFilterTrackers ()Z
	public final fun getLimitLanPeers ()Z
	public final fun getLimitTcpOverhead ()Z
	public final fun getLimitUtpRate ()Z
	public final fun getListenPort ()I
	public final fun getLocale ()Ljava/lang/String;
	public final fun getLsd ()Z
	public final fun getMailNotificationAuthEnabled ()Z
	public final fun getMailNotificationEmail ()Ljava/lang/String;
	public final fun getMailNotificationEnabled ()Z
	public final fun getMailNotificationPassword ()Ljava/lang/String;
	public final fun getMailNotificationSender ()Ljava/lang/String;
	public final fun getMailNotificationSmtp ()Ljava/lang/String;
	public final fun getMailNotificationSslEnabled ()Z
	public final fun getMailNotificationUsername ()Ljava/lang/String;
	public final fun getMaxActiveDownloads ()I
	public final fun getMaxActiveTorrents ()I
	public final fun getMaxActiveUploads ()I
	public final fun getMaxConnections ()I
	public final fun getMaxConnectionsPerTorrent ()I
	public final fun getMaxRatio ()F
	public final fun getMaxRatioAction ()Lqbittorrent/models/preferences/MaxRatioAction;
	public final fun getMaxRatioEnabled ()Z
	public final fun getMaxSeedingTime ()I
	public final fun getMaxSeedingTimeEnabled ()Z
	public final fun getMaxUploads ()I
	public final fun getMaxUploadsPerTorrent ()I
	public final fun getOutgoingPortsMax ()I
	public final fun getOutgoingPortsMin ()I
	public final fun getPex ()Z
	public final fun getPreallocateAll ()Z
	public final fun getProxyAuthEnabled ()Z
	public final fun getProxyIp ()Ljava/lang/String;
	public final fun getProxyPassword ()Ljava/lang/String;
	public final fun getProxyPeerConnections ()Z
	public final fun getProxyPort ()I
	public final fun getProxyTorrentsOnly ()Ljava/lang/Boolean;
	public final fun getProxyType ()Lqbittorrent/models/preferences/ProxyType;
	public final fun getProxyUsername ()Ljava/lang/String;
	public final fun getQueueingEnabled ()Z
	public final fun getRandomPort ()Z
	public final fun getRecheckCompletedTorrents ()Z
	public final fun getResolvePeerCountries ()Z
	public final fun getRssAutoDownloadingEnabled ()Z
	public final fun getRssDownloadRepackProperEpisodes ()Z
	public final fun getRssMaxArticlesPerFeed ()I
	public final fun getRssProcessingEnabled ()Z
	public final fun getRssRefreshInterval ()I
	public final fun getRssSmartEpisodeFilters ()Ljava/lang/String;
	public final fun getSavePath ()Ljava/lang/String;
	public final fun getSavePathChangedTmmEnabled ()Z
	public final fun getSaveResumeDataInterval ()I
	public final fun getScanDirs ()Ljava/util/List;
	public final fun getScheduleFromHour ()I
	public final fun getScheduleFromMin ()I
	public final fun getScheduleToHour ()I
	public final fun getScheduleToMin ()I
	public final fun getSchedulerDays ()Lqbittorrent/models/preferences/SchedulerDays;
	public final fun getSchedulerEnabled ()Z
	public final fun getSendBufferLowWatermark ()I
	public final fun getSendBufferWatermark ()I
	public final fun getSendBufferWatermarkFactor ()I
	public final fun getSlowTorrentDlRateThreshold ()I
	public final fun getSlowTorrentInactiveTimer ()I
	public final fun getSlowTorrentUlRateThreshold ()I
	public final fun getSocketBacklogSize ()I
	public final fun getStartPausedEnabled ()Ljava/lang/Boolean;
	public final fun getStopTrackerTimeout ()I
	public final fun getTempPath ()Ljava/lang/String;
	public final fun getTempPathEnabled ()Z
	public final fun getTorrentChangedTmmEnabled ()Z
	public final fun getUpLimit ()I
	public final fun getUploadChokingAlgorithm ()Lqbittorrent/models/preferences/UploadChokingAlgorithm;
	public final fun getUploadSlotsBehavior ()Lqbittorrent/models/preferences/UploadSlotsBehavior;
	public final fun getUpnp ()Z
	public final fun getUpnpLeaseDuration ()I
	public final fun getUseHttps ()Z
	public final fun getUtpTcpMixedMode ()Lqbittorrent/models/preferences/UtpTcpMixedMode;
	public final fun getWebUiAddress ()Ljava/lang/String;
	public final fun getWebUiBanDuration ()I
	public final fun getWebUiClickjackingProtectionEnabled ()Z
	public final fun getWebUiCsrfProtectionEnabled ()Z
	public final fun getWebUiCustomHttpHeaders ()Ljava/util/List;
	public final fun getWebUiDomainList ()Ljava/util/List;
	public final fun getWebUiHostHeaderValidationEnabled ()Z
	public final fun getWebUiHttpsCertPath ()Ljava/lang/String;
	public final fun getWebUiHttpsKeyPath ()Ljava/lang/String;
	public final fun getWebUiMaxAuthFailCount ()I
	public final fun getWebUiPassword ()Ljava/lang/String;
	public final fun getWebUiPort ()I
	public final fun getWebUiSecureCookieEnabled ()Z
	public final fun getWebUiSessionTimeout ()I
	public final fun getWebUiUpnp ()Z
	public final fun getWebUiUseCustomHttpHeadersEnabled ()Z
	public final fun getWebUiUsername ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/QBittorrentPrefs$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/QBittorrentPrefs$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/QBittorrentPrefs;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/QBittorrentPrefs;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/QBittorrentPrefs$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/QBittorrentPrefsBuilder {
	public fun <init> ()V
	public final fun build ()Lkotlinx/serialization/json/JsonObject;
	public final fun set (Lkotlin/reflect/KProperty1;Ljava/lang/Object;)V
	public final fun setInfix (Lkotlin/reflect/KProperty1;Ljava/lang/Object;)V
}

public final class qbittorrent/models/QBittorrentPrefsSerializerMappingKt {
	public static final fun getSerializer (Lkotlin/reflect/KProperty1;)Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/ServerState {
	public static final field Companion Lqbittorrent/models/ServerState$Companion;
	public fun <init> (JJILqbittorrent/models/ConnectionStatus;IJJJJLjava/lang/String;IZLjava/lang/String;Ljava/lang/String;IIIIJJJIZLjava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAllTimeDownload ()J
	public final fun getAllTimeUpload ()J
	public final fun getAverageTimeInQueue ()I
	public final fun getConnectionStatus ()Lqbittorrent/models/ConnectionStatus;
	public final fun getDhtNodes ()I
	public final fun getDlInfoData ()J
	public final fun getDlInfoSpeed ()J
	public final fun getDlRateLimit ()J
	public final fun getFreeSpace ()J
	public final fun getGlobalShareRatio ()Ljava/lang/String;
	public final fun getQueuedIoJobs ()I
	public final fun getQueueing ()Z
	public final fun getReadCacheHits ()Ljava/lang/String;
	public final fun getReadCacheOverload ()Ljava/lang/String;
	public final fun getRefreshInterval ()I
	public final fun getSessionWaste ()J
	public final fun getTotalBuffersSize ()I
	public final fun getTotalPeerConnections ()I
	public final fun getTotalQueuedSize ()I
	public final fun getUpInfoData ()J
	public final fun getUpInfoSpeed ()J
	public final fun getUpRateLimit ()I
	public final fun getUseAltSpeedLimits ()Z
	public final fun getWriteCacheOverload ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/ServerState$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/ServerState$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/ServerState;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/ServerState;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/ServerState$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/Torrent {
	public static final field Companion Lqbittorrent/models/Torrent$Companion;
	public fun <init> (JJZFLjava/lang/String;JJLjava/lang/String;JJFFJZZLjava/lang/String;JLjava/lang/String;FJLjava/lang/String;IIIIIFFFLjava/lang/String;JJZJLqbittorrent/models/Torrent$State;ZLjava/util/List;JJJLjava/lang/String;JJJJ)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAddedOn ()J
	public final fun getAmountLeft ()J
	public final fun getAutoTmm ()Z
	public final fun getAvailability ()F
	public final fun getCategory ()Ljava/lang/String;
	public final fun getCompleted ()J
	public final fun getCompletedOn ()J
	public final fun getConnectedLeechers ()I
	public final fun getConnectedSeeds ()I
	public final fun getContentPath ()Ljava/lang/String;
	public final fun getDlLimit ()J
	public final fun getDlspeed ()J
	public final fun getDownloaded ()F
	public final fun getDownloadedSession ()F
	public final fun getEta ()J
	public final fun getFirstLastPiecePriority ()Z
	public final fun getForceStart ()Z
	public final fun getHash ()Ljava/lang/String;
	public final fun getLastActivity ()J
	public final fun getLeechersInSwarm ()I
	public final fun getMagnetUri ()Ljava/lang/String;
	public final fun getMaxRatio ()F
	public final fun getMaxSeedingTime ()J
	public final fun getName ()Ljava/lang/String;
	public final fun getPriority ()I
	public final fun getProgress ()F
	public final fun getRatio ()F
	public final fun getRatioLimit ()F
	public final fun getSavePath ()Ljava/lang/String;
	public final fun getSeedingTime ()J
	public final fun getSeedingTimeLimit ()J
	public final fun getSeedsInSwarm ()I
	public final fun getSeenCompleted ()J
	public final fun getSequentialDownload ()Z
	public final fun getSize ()J
	public final fun getState ()Lqbittorrent/models/Torrent$State;
	public final fun getSuperSeeding ()Z
	public final fun getTags ()Ljava/util/List;
	public final fun getTimeActive ()J
	public final fun getTotalSize ()J
	public final fun getTracker ()Ljava/lang/String;
	public final fun getUploadLimit ()J
	public final fun getUploadSpeed ()J
	public final fun getUploaded ()J
	public final fun getUploadedSession ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/Torrent$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/Torrent$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/Torrent;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/Torrent;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/Torrent$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/Torrent$State : java/lang/Enum {
	public static final field ALLOCATING Lqbittorrent/models/Torrent$State;
	public static final field CHECKING_DL Lqbittorrent/models/Torrent$State;
	public static final field CHECKING_RESUME_DATA Lqbittorrent/models/Torrent$State;
	public static final field CHECKING_UP Lqbittorrent/models/Torrent$State;
	public static final field Companion Lqbittorrent/models/Torrent$State$Companion;
	public static final field DOWNLOADING Lqbittorrent/models/Torrent$State;
	public static final field ERROR Lqbittorrent/models/Torrent$State;
	public static final field FORCED_DL Lqbittorrent/models/Torrent$State;
	public static final field FORCED_UP Lqbittorrent/models/Torrent$State;
	public static final field META_DL Lqbittorrent/models/Torrent$State;
	public static final field MISSING_FILES Lqbittorrent/models/Torrent$State;
	public static final field MOVING Lqbittorrent/models/Torrent$State;
	public static final field PAUSED_DL Lqbittorrent/models/Torrent$State;
	public static final field PAUSED_UP Lqbittorrent/models/Torrent$State;
	public static final field QUEUED_DL Lqbittorrent/models/Torrent$State;
	public static final field QUEUED_UP Lqbittorrent/models/Torrent$State;
	public static final field STALLED_DL Lqbittorrent/models/Torrent$State;
	public static final field STALLED_UP Lqbittorrent/models/Torrent$State;
	public static final field UNKNOWN Lqbittorrent/models/Torrent$State;
	public static final field UPLOADING Lqbittorrent/models/Torrent$State;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/Torrent$State;
	public static fun values ()[Lqbittorrent/models/Torrent$State;
}

public final class qbittorrent/models/Torrent$State$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentFile {
	public static final field Companion Lqbittorrent/models/TorrentFile$Companion;
	public fun <init> (ILjava/lang/String;JFILjava/lang/Boolean;Ljava/util/List;F)V
	public synthetic fun <init> (ILjava/lang/String;JFILjava/lang/Boolean;Ljava/util/List;FILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAvailability ()F
	public final fun getIndex ()I
	public final fun getName ()Ljava/lang/String;
	public final fun getPieceRange ()Ljava/util/List;
	public final fun getPriority ()I
	public final fun getProgress ()F
	public final fun getSize ()J
	public fun hashCode ()I
	public final fun isSeeding ()Ljava/lang/Boolean;
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/TorrentFile$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/TorrentFile$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/TorrentFile;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/TorrentFile;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentFile$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentFilter : java/lang/Enum {
	public static final field ACTIVE Lqbittorrent/models/TorrentFilter;
	public static final field ALL Lqbittorrent/models/TorrentFilter;
	public static final field COMPLETED Lqbittorrent/models/TorrentFilter;
	public static final field DOWNLOADING Lqbittorrent/models/TorrentFilter;
	public static final field INACTIVE Lqbittorrent/models/TorrentFilter;
	public static final field PAUSED Lqbittorrent/models/TorrentFilter;
	public static final field RESUMED Lqbittorrent/models/TorrentFilter;
	public static final field STALLED Lqbittorrent/models/TorrentFilter;
	public static final field STALLED_DOWNLOADING Lqbittorrent/models/TorrentFilter;
	public static final field STALLED_UPLOADING Lqbittorrent/models/TorrentFilter;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/TorrentFilter;
	public static fun values ()[Lqbittorrent/models/TorrentFilter;
}

public final class qbittorrent/models/TorrentKt {
	public static final fun getSerialName (Lkotlin/reflect/KProperty1;)Ljava/lang/String;
}

public final class qbittorrent/models/TorrentPeer {
	public static final field Companion Lqbittorrent/models/TorrentPeer$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IFFJJ)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IFFJJILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClient ()Ljava/lang/String;
	public final fun getConnection ()Ljava/lang/String;
	public final fun getCountry ()Ljava/lang/String;
	public final fun getCountryCode ()Ljava/lang/String;
	public final fun getDlSpeed ()J
	public final fun getDownloaded ()J
	public final fun getFiles ()Ljava/lang/String;
	public final fun getFlags ()Ljava/lang/String;
	public final fun getFlagsDesc ()Ljava/lang/String;
	public final fun getIp ()Ljava/lang/String;
	public final fun getPort ()I
	public final fun getProgress ()F
	public final fun getRelevance ()F
	public final fun getUpSpeed ()J
	public final fun getUploaded ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/TorrentPeer$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/TorrentPeer$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/TorrentPeer;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/TorrentPeer;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentPeer$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentPeers {
	public static final field Companion Lqbittorrent/models/TorrentPeers$Companion;
	public fun <init> ()V
	public fun <init> (ZIZLjava/util/Map;Ljava/util/List;)V
	public synthetic fun <init> (ZIZLjava/util/Map;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFullUpdate ()Z
	public final fun getPeers ()Ljava/util/Map;
	public final fun getPeersRemoved ()Ljava/util/List;
	public final fun getRid ()I
	public final fun getShowFlags ()Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/TorrentPeers$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/TorrentPeers$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/TorrentPeers;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/TorrentPeers;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentPeers$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentProperties {
	public static final field Companion Lqbittorrent/models/TorrentProperties$Companion;
	public fun <init> (Ljava/lang/String;JJLjava/lang/String;JJJJJJJJJIIFJJLjava/lang/String;JJJJIIIIJIIJJJ)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAdditionDate ()J
	public final fun getComment ()Ljava/lang/String;
	public final fun getCompletionDate ()J
	public final fun getCreatedBy ()Ljava/lang/String;
	public final fun getCreationDate ()J
	public final fun getDlLimit ()J
	public final fun getDlSpeed ()J
	public final fun getDlSpeedAvg ()J
	public final fun getEta ()J
	public final fun getLastSeen ()J
	public final fun getNbConnections ()I
	public final fun getNbConnectionsLimit ()I
	public final fun getPeers ()I
	public final fun getPeersTotal ()I
	public final fun getPieceSize ()J
	public final fun getPiecesHave ()I
	public final fun getPiecesNum ()I
	public final fun getReannounce ()J
	public final fun getSavePath ()Ljava/lang/String;
	public final fun getSeedingTime ()J
	public final fun getSeeds ()I
	public final fun getSeedsTotal ()I
	public final fun getShareRatio ()F
	public final fun getTimeElapsed ()J
	public final fun getTotalDownloaded ()J
	public final fun getTotalDownloadedSession ()J
	public final fun getTotalSize ()J
	public final fun getTotalUploaded ()J
	public final fun getTotalUploadedSession ()J
	public final fun getTotalWasted ()J
	public final fun getUpLimit ()J
	public final fun getUpSpeed ()J
	public final fun getUpSpeedAvg ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/TorrentProperties$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/TorrentProperties$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/TorrentProperties;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/TorrentProperties;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentProperties$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentTracker {
	public static final field Companion Lqbittorrent/models/TorrentTracker$Companion;
	public fun <init> (Ljava/lang/String;IIIIIILjava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;IIIIIILjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getMsg ()Ljava/lang/String;
	public final fun getNumDownloaded ()I
	public final fun getNumLeeches ()I
	public final fun getNumPeers ()I
	public final fun getNumSeeds ()I
	public final fun getStatus ()I
	public final fun getTier ()I
	public final fun getUrl ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/TorrentTracker$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/TorrentTracker$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/TorrentTracker;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/TorrentTracker;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/TorrentTracker$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/Webseed {
	public static final field Companion Lqbittorrent/models/Webseed$Companion;
	public fun <init> (Ljava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getUrl ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/Webseed$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/Webseed$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/Webseed;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/Webseed;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/Webseed$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/BittorrentProtocol : java/lang/Enum {
	public static final field TCP Lqbittorrent/models/preferences/BittorrentProtocol;
	public static final field TCP_AND_UTP Lqbittorrent/models/preferences/BittorrentProtocol;
	public static final field UTP Lqbittorrent/models/preferences/BittorrentProtocol;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/BittorrentProtocol;
	public static fun values ()[Lqbittorrent/models/preferences/BittorrentProtocol;
}

public final class qbittorrent/models/preferences/DyndnsService : java/lang/Enum {
	public static final field DyDNS Lqbittorrent/models/preferences/DyndnsService;
	public static final field NOIP Lqbittorrent/models/preferences/DyndnsService;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/DyndnsService;
	public static fun values ()[Lqbittorrent/models/preferences/DyndnsService;
}

public final class qbittorrent/models/preferences/MaxRatioAction : java/lang/Enum {
	public static final field PAUSE_TORRENT Lqbittorrent/models/preferences/MaxRatioAction;
	public static final field REMOVE_TORRENT Lqbittorrent/models/preferences/MaxRatioAction;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/MaxRatioAction;
	public static fun values ()[Lqbittorrent/models/preferences/MaxRatioAction;
}

public final class qbittorrent/models/preferences/ProxyType : java/lang/Enum {
	public static final field Companion Lqbittorrent/models/preferences/ProxyType$Companion;
	public static final field HTTP Lqbittorrent/models/preferences/ProxyType;
	public static final field NONE Lqbittorrent/models/preferences/ProxyType;
	public static final field SOCKS4 Lqbittorrent/models/preferences/ProxyType;
	public static final field SOCKS5 Lqbittorrent/models/preferences/ProxyType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/ProxyType;
	public static fun values ()[Lqbittorrent/models/preferences/ProxyType;
}

public final class qbittorrent/models/preferences/ProxyType$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public abstract class qbittorrent/models/preferences/ScanDir {
	public static final field Companion Lqbittorrent/models/preferences/ScanDir$Companion;
	public synthetic fun <init> (ILkotlinx/serialization/internal/SerializationConstructorMarker;)V
	public static final synthetic fun write$Self (Lqbittorrent/models/preferences/ScanDir;Lkotlinx/serialization/encoding/CompositeEncoder;Lkotlinx/serialization/descriptors/SerialDescriptor;)V
}

public final class qbittorrent/models/preferences/ScanDir$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/ScanDir$CustomSavePath : qbittorrent/models/preferences/ScanDir {
	public static final field Companion Lqbittorrent/models/preferences/ScanDir$CustomSavePath$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getPath ()Ljava/lang/String;
	public final fun getScanDir ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/preferences/ScanDir$CustomSavePath$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/preferences/ScanDir$CustomSavePath$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/preferences/ScanDir$CustomSavePath;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/preferences/ScanDir$CustomSavePath;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/ScanDir$CustomSavePath$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/ScanDir$DefaultSavePath : qbittorrent/models/preferences/ScanDir {
	public static final field Companion Lqbittorrent/models/preferences/ScanDir$DefaultSavePath$Companion;
	public fun <init> (Ljava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getScanDir ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/preferences/ScanDir$DefaultSavePath$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/preferences/ScanDir$DefaultSavePath$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/preferences/ScanDir$DefaultSavePath;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/preferences/ScanDir$DefaultSavePath;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/ScanDir$DefaultSavePath$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/ScanDir$MonitoredFolder : qbittorrent/models/preferences/ScanDir {
	public static final field Companion Lqbittorrent/models/preferences/ScanDir$MonitoredFolder$Companion;
	public fun <init> (Ljava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getScanDir ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public synthetic class qbittorrent/models/preferences/ScanDir$MonitoredFolder$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lqbittorrent/models/preferences/ScanDir$MonitoredFolder$$serializer;
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lqbittorrent/models/preferences/ScanDir$MonitoredFolder;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Lqbittorrent/models/preferences/ScanDir$MonitoredFolder;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/ScanDir$MonitoredFolder$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class qbittorrent/models/preferences/SchedulerDays : java/lang/Enum {
	public static final field EVERY_DAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field EVERY_WEEKDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field EVERY_WEEKEND Lqbittorrent/models/preferences/SchedulerDays;
	public static final field FRIDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field MONDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field SATURDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field SUNDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field THURSDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field TUESDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static final field WEDNESDAY Lqbittorrent/models/preferences/SchedulerDays;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/SchedulerDays;
	public static fun values ()[Lqbittorrent/models/preferences/SchedulerDays;
}

public final class qbittorrent/models/preferences/TorrentEncryption : java/lang/Enum {
	public static final field FORCE_ENCRYPTION_OFF Lqbittorrent/models/preferences/TorrentEncryption;
	public static final field FORCE_ENCRYPTION_ON Lqbittorrent/models/preferences/TorrentEncryption;
	public static final field PREFER_ENCRYPTION Lqbittorrent/models/preferences/TorrentEncryption;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/TorrentEncryption;
	public static fun values ()[Lqbittorrent/models/preferences/TorrentEncryption;
}

public final class qbittorrent/models/preferences/UploadChokingAlgorithm : java/lang/Enum {
	public static final field ANTI_LEECH Lqbittorrent/models/preferences/UploadChokingAlgorithm;
	public static final field FASTEST_UPLOAD Lqbittorrent/models/preferences/UploadChokingAlgorithm;
	public static final field ROUND_ROBIN Lqbittorrent/models/preferences/UploadChokingAlgorithm;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/UploadChokingAlgorithm;
	public static fun values ()[Lqbittorrent/models/preferences/UploadChokingAlgorithm;
}

public final class qbittorrent/models/preferences/UploadSlotsBehavior : java/lang/Enum {
	public static final field FIXED_SLOTS Lqbittorrent/models/preferences/UploadSlotsBehavior;
	public static final field UPLOAD_RATE_BASED Lqbittorrent/models/preferences/UploadSlotsBehavior;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/UploadSlotsBehavior;
	public static fun values ()[Lqbittorrent/models/preferences/UploadSlotsBehavior;
}

public final class qbittorrent/models/preferences/UtpTcpMixedMode : java/lang/Enum {
	public static final field PEER_PROPORTIONAL Lqbittorrent/models/preferences/UtpTcpMixedMode;
	public static final field PREFER_TCP Lqbittorrent/models/preferences/UtpTcpMixedMode;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lqbittorrent/models/preferences/UtpTcpMixedMode;
	public static fun values ()[Lqbittorrent/models/preferences/UtpTcpMixedMode;
}

public final class qbittorrent/models/serialization/ScanDirSerializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Lqbittorrent/models/serialization/ScanDirSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/util/List;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/util/List;)V
}

